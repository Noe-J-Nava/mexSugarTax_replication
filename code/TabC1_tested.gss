/************************************************************************/;
/***             GAUSS program for censored QAIDS model            ******/;
/***           (Diansheng Dong and No√© J Nava, ERS/USDA)           ******/;
/***                        (Feb, 2022 )                           ******/;
/************************************************************************/;

//new; closeall;cls;
external proc indices;

clearg der, der2, c1, c2, se, j2, se1, se2, ss, b, t, k, cc, m, 
         dummy_q, share, fulshare, lnprice, xpd, totexp,z,t1,ttt,
         nummm,cb,gtg,parnames,expvar,price,deflator,part1,part2;

/************************************************************************/;
let DEMOVAR  = age size@ educ sex@;  //demos in share equation;
                               
let SHAREVAR = s_ssb s_jui s_mil s_oth;

let PRICEVAR = lnp_ssb lnp_jui lnp_mil lnp_oth;

let TOTEXVAR   = lnw;

let EQNAMES  = SSB JUICE MILK OTHERS;               
                                  

critic=0.12;     //Convergend Criteria

outfile ="output_directory";
datafile = "datafile_directory";
save path="output_directory";
load path="output_directory";
                                                  
outfile1="bv4";
outfile2="bv4";
outfile3="vc4";

@***************************@;

/***Starting values for full var-cov matrix******/;

numeq=rows(eqnames)-1;
numdemo=rows(DEMOVAR);

alphavc=zeros(numeq,1);
lamdavc=0.001*ones(numeq,1);
demovc=0.002*ones(numeq*numdemo,1);
expcoef=0.003*ones(numeq,1);

insones=ones(numeq,1);
vcoef=zeros(numeq,numeq);
vcoef=diagrv(vcoef,insones);
nummmv=sumc(cumsumc(ones(numeq-1,1)));
vcoef=vech(vcoef);
vcoef1=ones(numeq,1);

prvec=(0.01)*vcoef;
prvec1=zeros(numeq*(numeq+1),1);   

b=alphavc|lamdavc|demovc|expcoef|prvec|vcoef;
//load b=^outfile2;

/********** Read in Data *************/;
      
open fp=^datafile varindxi;  /*Data File*/;
numhh=rowsf(fp);
data=readr(fp,numhh);
close(fp);

@********* create variables ********************************@;
{v1,v2}=indices(datafile,sharevar);
{v3,v4}=indices(datafile,pricevar);
{v5,v6}=indices(datafile,demovar);
{v7,v8}=indices(datafile,totexvar);

@
/**** delete expenditure outliers ****/;
share     = data[.,v2'];
lntotexp  = data[.,v8'];
totexp    = exp(lntotexp);
xpd       = share.*totexp;

dd2 = xpd .gt (meanc(xpd)'+3*stdc(xpd)');   
dd2 = (sumc(dd2') .gt 0);
dd2 = dd2 .eq 0;
dd3 = dd1.*dd2;
data=selif(data, dd3); 
/**************************************/; 
@

share     = data[.,v2'];
lnprice   = data[.,v4'];
demov     = data[.,v6'];
lntotexp  = data[.,v8'];
price     = exp(lnprice);
totexp    = exp(lntotexp);
 
t=rows(share);
m=cols(share);
dummy_q=share .gt 0;
nummm=sumc(cumsumc(ones(m-1,1)));
ttt=cumsumc(ones(m,1));

const = ones(t,1);
z = demov;
z=ln(z[.,1])~(1/z[.,2]);  //log age, inverse size;
t1=cols(z);
nhhs=rows(totexp); //total obs

@*******create price coefficient names and variance-covariance names***********@;
prvarnames=pricevar[1:m-1];
expvarnames=sharevar;    
prnamemat=zeros(m-1,m-1);
cvnamemat=zeros(m-1,m-1);
tttttt=cumsumc(ones(m-1,1)); 

prnamemat2=zeros(sumc(tttttt),1);
cvnamemat2=zeros(sumc(tttttt),1);

kkk=1;
for ii (1,m-1,1);
     for jj (1,m-1,1);
      prnamemat[ii,jj]=0 $+ "pr" $+ ftocv(ii,2,0) $+ ftocv(jj,2,0);
      cvnamemat[ii,jj]=0 $+ "cv" $+ ftocv(ii,2,0) $+ ftocv(jj,2,0);
      if jj<=ii;        
         prnamemat2[kkk,.]=prnamemat[ii,jj];
         cvnamemat2[kkk,.]=cvnamemat[ii,jj];
         kkk=kkk+1;
      endif;
   endfor;
endfor;

@*****create Dem names*****@;

demvarnames=demovar;    
demnamemat=zeros(m-1,t1);
for ii (1,m-1,1);
   for jj (1,t1,1);
      demnamemat[ii,jj]=0 $+ "dem"  $+ ftocv(ii,2,0) $+ ftocv(jj,2,0);
   endfor;
endfor;
demnamemat=reshape(demnamemat,(m-1)*t1,1);

@*****create alpha paramater names*****@;
alpnamemat=zeros(m-1,1);
for ii (1,m-1,1);
   alpnamemat[ii]=0 $+ "alpha" $+ ftocv(ii,2,0);
endfor;

@*****create lamda paramater names*****@;
lamnamemat=zeros(m-1,1);
for ii (1,m-1,1);
   lamnamemat[ii]=0 $+ "lamda" $+ ftocv(ii,2,0);
endfor;

@*****create total expenditure coefficent names*****@;
expnamemat=zeros(m-1,1);
for ii (1,m-1,1);
   expnamemat[ii]=0 $+ "exp" $+ ftocv(ii,2,0);
endfor;
@*************************************@;

ParNames=alpnamemat|lamnamemat|demnamemat|expnamemat|prnamemat2|cvnamemat2;
         
@**************************************************************@;

numdis1=trunc(rows(b)./7);
remdis1=rows(b)-(numdis1*7);
k=rows(b);

/****************Log Likelihood Function************************/

proc LLF(b);    @ b=parameters @
clearg betai,gamma_b,sigma,demo,sigma1, lllooo,count,counti,
       demo,fulldemo,om_beta,fullbeta,om_gamma,fullgamma,ownompr,
       fullsigma,sort_sig,sortdemo,sortgamm,sortbeta,sharesort,pricesort,
       lf,pdf,pdf1,hajp,hajp1,lll,ooo,sp1,nn,sigma_omr,sigma_omc,sigma_om,
       s00,s10,s11,sgg,sortgamm11,fulsortgamm,high2,BB,AA,DD,CC,AA1,
       low1,low2,a,a1,a2,spa,szg,numzeros,sig_or,gam_or,numpos,partA,partB,
       U_bar,U_sta,R_c,II,JJ,alpha,omega,omega11,omega10,omega00, 
       omg_final,numpos,RR,D_2,PP,PP0,part1,part2,diagD,BB,sort_sig_1,alpha_0,
       fullalpha, lamda, fulllamda, nn1, lnap, bp, qshare, qsharesort;  

@***define coefficients****************@;
    
     @**alpha **@;
     alpha = b[1:m-1];
     fullalpha=alpha|(1-sumc(alpha));
    
     @**lamda **@;
     lamda = b[m:2*(m-1)];
     fulllamda=lamda|(-sumc(lamda));  
    
     @**demo coefficients**@;
     demo=reshape(b[2*(m-1)+1: 2*(m-1)+(m-1)*t1],m-1,t1);   
     fulldemo=demo|(-sumc(demo)');

     @**expenditure coefficients**@;
     betai=b[(m-1)*t1+2*(m-1)+1:(m-1)*t1+3*(m-1)];
     fullbeta=betai|(-sumc(betai));
     nn1=(m-1)*t1+3*(m-1);
     
     @**price coefficients**@;
     gamma_b=xpnd(b[nn1+1:nn1+nummm]);
     om_gamma=-sumc(gamma_b);
     ownompr=-sumc(om_gamma);
     fullgamma=(gamma_b~om_gamma)|(om_gamma'~ownompr);
     
     @** nn is the # of parameters in alpha, beta, and demo **@;
     nn=nummm+nn1;
     
     @****Variance-Covariance Matrix***@;
     sigma=upmat(xpnd(b[nn+1:nn+.5*m*(m-1)]));
     sigma=sigma'sigma;
     sigma_omr=-sumc(sigma)';
     sigma_om=-sumc(sigma_omr');
     fullsigma=(sigma~sigma_omr')|(sigma_omr~sigma_om); 
     
    
     @**************Alpha_0******************************@;
     //alpha_0=b[rows(b),.];   //normalize alpha0 as 0;
   
@**************************************************************@;
lnap=lnprice*fullalpha + 0.5*sumc((lnprice.*(fullgamma*lnprice')')');   // Want this (n x 1). n is total obs;
bp   =exp(lnprice*fullbeta);
qshare=fullalpha'+lnprice*fullgamma+(fullbeta'+z*fulldemo').*(lntotexp-lnap)+(fulllamda'./bp).*((lntotexp-lnap)^2); 
//QAIDS share equation (n x m). m is # of share equations;

@**************************************************************@;
lf=zeros(t,1);
count=0;counti=0;
for i (1,t,1);

@*************************************************@
@** get positive and 0 share indices        ***@    
@*************************************************@
     lll=(indexcat(dummy_q[i,.]',1))';
     ooo=(indexcat(dummy_q[i,.]',0))';
     numpos=sumc(dummy_q[i,.]');
     lllooo=lll~ooo;
     
if numpos .< m;
     
@*******************************************************@;
@**** The followings are the computations of  ****@;
@****  log-likelihood for different regimes   ********@;
@*******************************************************@;
  
@**** Regime 1: consumed 1 to m-1 *****@;
     
     @**  parameter arrangement for each micro-regimes **@;
     @**  so that all positives first then followed by all 0s  **@
    
     sort_sig=fullsigma[lllooo, lllooo];//re-arrange ; 

     @** data arrangement **@;
     sharesort=share[i,lllooo];
     pricesort=lnprice[i,lllooo];
     
     @** qshare arrangement **@;
     qsharesort=qshare[i,lllooo]'; 
     
     sort_sig_1=sort_sig[1:m-1,1:m-1];
     a=sharesort[.,1:numpos]'/sharesort[.,1]; 
      
      if numpos == m-1;   
        
        AA1=diagrv(zeros(m-1,m-1),a);
        omega=AA1*invpd(sort_sig_1)*AA1';
        s11=omega[1:numpos,1:numpos];
        
        U_bar=qsharesort[1];
        II=ones(numpos,1);
        JJ=qsharesort[1:numpos]./(a*qsharesort[1]);

        omega11=(II'*s11*II);
        omega10=(II'*s11*JJ);
        omega00=(JJ'*s11*JJ);

        U_sta=invpd(omega11)*omega10*U_bar;
 
        omg_final=invpd(omega11);

        part1=U_bar'*omega00*U_bar-U_sta'*omega11*U_sta;
        part2=exp(-0.5*part1)*((2*PI)^(0.5*(1-numpos)))*
                (((det(sort_sig_1))^(-0.5))/((det(omg_final))^(-0.5)));

        D_2=diagrv(zeros(m-numpos,m-numpos),(diag(omg_final))^(0.5)); 
        RR=corrvc(omg_final);  
        
        AA=(1/sharesort[.,1]);
        CC=AA*D_2;
        PP0=(ones(1,1));
        PP=PP0-AA*U_sta;
        diagD=zeros(1,m-numpos);   
                for j (1, m-numpos, 1);
                    diagD[j]=((CC[j,.]*RR*CC[j,.]')^(-0.5));
                endfor;
        DD=diagrv(zeros(m-numpos,m-numpos),diagD);
        BB=DD*PP;
        R_c=DD*CC*RR*CC'*DD;                
      
      else;
        AA1=diagrv(zeros(m-1,m-1),a|ones(m-numpos-1,1));
        omega=AA1*invpd(sort_sig_1)*AA1';
        s11=omega[1:numpos,1:numpos];
        s10=omega[1:numpos,numpos+1:m-1];
        s00=omega[numpos+1:m-1,numpos+1:m-1];

        U_bar=qsharesort[1 numpos+1:m-1];
        II=ones(numpos,1);
        JJ=qsharesort[1:numpos]./(a*qsharesort[1]);

        omega11=((II'*s11*II)~(II'*s10))|((s10'*II)~s00);
        omega10=((II'*s11*JJ)~(II'*s10))|((s10'*JJ)~s00);
        omega00=((JJ'*s11*JJ)~(JJ'*s10))|((s10'*JJ)~s00);

        U_sta=invpd(omega11)*omega10*U_bar; 
 
        omg_final=invpd(omega11);

        part1=U_bar'*omega00*U_bar-U_sta'*omega11*U_sta;
        part2=exp(-0.5*part1)*((2*PI)^(0.5*(1-numpos)))*
                (((det(sort_sig_1))^(-0.5))/((det(omg_final))^(-0.5)));

        D_2=diagrv(zeros(m-numpos,m-numpos),(diag(omg_final))^(0.5)); 
        RR=corrvc(omg_final);  
        
        AA=diagrv(zeros(m-numpos,m-numpos),-1*ones(1,m-numpos));
        AA[1,.]=(1/sharesort[.,1])~ones(1,m-numpos-1);
        CC=AA*D_2;
        PP0=(ones(1,1)|zeros(m-numpos-1,1));
        PP=PP0-AA*U_sta;
        diagD=zeros(1,m-numpos);   
                for j (1, m-numpos, 1);
                    diagD[j]=((CC[j,.]*RR*CC[j,.]')^(-0.5));
                endfor;
        DD=diagrv(zeros(m-numpos,m-numpos),diagD);
        BB=DD*PP;
        R_c=DD*CC*RR*CC'*DD;
      endif;  
      
     @ 
     if  numpos == m-1;
         HAJP=ln(part2)+ln(cdfn(-BB));      
     elseif numpos == m-2;
         HAJP=ln(part2)+ln(cdfbvn(-BB[1], -BB[2], R_c[1,2])); 
     elseif numpos == m-3;
         HAJP=ln(part2)+ln(cdftvn(-BB[1], -BB[2], -BB[3], R_c[1,2], R_c[2,3], R_c[1,3])); 
     endif;
      @
          
     HAJP=ln(part2)+ln(cdfmvn(-BB,R_c));    
     lf[i]=HAJP;     
   
 else; 
@**** Regime 2: consumed all (m+1) ********@; 
     count=count+1;    
    
     a2=share[i,.]'-qshare[i,.]';     
     a2=a2[1:m-1];
     pdf=((2*pi)^(-.5*(m-1)))*((det(sigma))^(-.5))*
                        exp(-.5*(a2'*invpd(sigma)*a2));

     lf[i]=ln(pdf);    
        
 endif;  
endfor;

retp(lf); 
endp;    

@*********************************************@;
proc clf(b);local v;v=llf(b);retp(sumc(v));endp;
@*********************************************@;

print   "Starttime: " $timestr(time);
print;print  "Number of Observations:  " t;
 
count=0;
b0=zeros(rows(b),1);

    start:
    format 9,4;         
    der=gradp(&llf,b); gtg=der'der;
    cb=invpd(der'der)*sumc(der);     
    vvvv=(sumc(abs(sumc(der))))/t;
    vvv1=maxc((abs(b0-b))./b); 
    count=count+1;
    print "Iteration:  " count;
    print "Likelihood Function:  " sumc(llf(b));
    print "Sum of Abs. Grad/HH:  " vvvv;

        s = 2;
        li1 = 0; 
        li2 = 1;
        b0=b;
        do until li1 >= li2;
           s = s/2;
           li1 = sumc(llf(b0 + s*cb));
           li2 = sumc(llf(b0 + s*cb/2));
        endo;
        b=b0+s*cb;  //save ^outfile2=b;

        ii=1;
        do while ii<=numdis1;
            print  b[((ii-1)*7+1):(ii*7)]';
             ii=ii+1;
        endo;
        if remdis1>0;print  b[((ii-1)*7+1):((ii-1)*7+remdis1)]';endif;

       print  "Time:  " $TIMESTR(TIME);  
       print  " ";
    if (vvvv <= critic); 
      der2=-eye(k);
      print "The Convergence Criteria Has Been Met";
      print "  ";
      gosub Result; end; 
    endif;
    
    goto start;    


/******* print results **************/;
Result: 
format /rd 9,4;
output file=^outfile reset;
print sumc(llf(b));; vvvv;
temp_1=sb(b);

let headname="PARAMTER" "ESTIMATE" " STD ERR" " T-VALUE" ;
results=(ParNames~temp_1);
let outmask[1,4]= 0 1 1 1 ;
let outfmt[4,3]=
    "-*.*s " 12 12 @ vnames, character @
    "*.*lf " 12 4  @ parameters @
    "*.*lf " 12 4  @ std errors @
    "*.*lf " 12 4  @ "T-values  @ ;

print "These are the commodities actually estimated:";
?;
ttt=cumsumc(ones(rows(eqnames),1));
commod=ttt~eqnames;
let outmask2[1,2]=1 0;
let outfmt2[2,3]=
 "*.*lf " 2 0
 "-*.*s " 12 12;
dd=printfm(commod,outmask2,outfmt2);

print "These are the demographics:";
?;
ttt3=cumsumc(ones(rows(demvarnames),1));
commod3=ttt3~demvarnames;
let outmask3[1,2]=1 0;
let outfmt3[2,3]=
 "*.*lf " 2 0
 "-*.*s " 12 12;
dd3=printfm(commod3,outmask3,outfmt3);

?; $ headname';?;
d=printfm(results,outmask,outfmt);
print;
"results are saved to: " $outfile;
save ^outfile2=b; save ^outfile3=c1;
return;

@*************************** outside proc *************************@;
/***** compute parameter variance *************/;
proc sb(b); c1=invpd(gtg); c2=invpd(-der2); format 12,7;
     se1=sqrt(diag(c1)); ss=c2*(gtg)*c2; se2=sqrt(diag(ss));
     se=se1*(1-j2)+se2*j2;
retp(b~se1~(b./se)); endp;
@******************************************************************@;
